// Copyright 2019 ykpark@dcn.ssu.ac.kr authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// message definition 
// python -m grpc_tools.protoc -I/root/nfd-grpc --python_out=/root/nfd-grpc --grpc_python_out=/root/nfd-grpc /root/nfd-grpc/nfd_agent.proto

syntax = "proto3";

package nfd;
import "google/protobuf/empty.proto";

// Advertisement NFD Information
message HostAdapters{
    string nic_ipaddr = 1;
    string nic_prefix = 2;
    string nic_name = 3;
}
message NFDHost{
    string name = 1;
    string ipaddr = 2;
    string ifname = 3;
    repeated HostAdapters host_adapters = 4;
}

// Ack Reply
message AckReply{
  string ack_code = 1; // 'ok' or 'err'
  string ack_msg = 2;
}


// Request NFD Face List for client
// '0' is ALL or other number is faceid
message NFDFaceIDReq{
    int32 faceid = 1;
    string neighbor_hostname = 2;
    string neighbor_ip = 3;
    string neighbor_site_route = 4;
}

// Response NFD Face List
// ex=>faceid=1 remote=internal:// local=internal:// congestion={base-marking-interval=100ms default-threshold=65536B} mtu=8800 counters={in={0i 43d 0n 18887B} out={56i 0d 0n 3725B}} flags={local permanent point-to-point local-fields}
message NFDFace{
    string faceid = 1;
    string remote = 2;
    string local = 3;
    string congestion = 4;
    string mtu = 5;
    string counters = 6;
    string out = 7;
    string flags = 8;
}

message NFDFaceListRes{
    repeated NFDFace faces = 1;
    AckReply ack = 2;
}


// https://named-data.net/doc/NFD/current/manpages/nfdc-face.html
message NFDFaceCreateReq{
    string remote = 1;                      // udp://router.example.net
    string persistency = 2;                 // persistent(the default) or permanent
    string local = 3;                       // dev://eth0
    string reliability = 4;                 // on or off(the default)
    string congestion_marking = 5;          // on(the default) or off
    string congestion_marking_interval = 6; // specified in milliseconds
    string default_congestion_threshold = 7;// specified in bytes
    string mtu = 8;                         // specified in bytes
    string neighbor_hostname = 9;
    string neighbor_ip = 10;
    string neighbor_site_route = 11;
}

message NFDFibListRes{
    repeated string fib = 1;
    AckReply ack = 2;
}

// https://named-data.net/doc/NFD/current/manpages/nfdc-route.html
message NFDRouteListReq{
    string nexthop = 1; // <FACEID:1234|FACEURI:udp://router.example.net>
    string origin = 2;  // <ORIGIN:static>
}
message NFDRouteListRes{
    repeated string route = 1;
    AckReply ack = 2;
}

message NFDRouteShowReq{
    string prefix = 1; // <PREFIX:/localhost/nfd>
}
message NFDRouteShowRes{
    repeated string route = 1;
    AckReply ack = 2;
}
message NFDRouteReq{
    string prefix = 1;  // /ndn/nfd/test
    string nexthop = 2; // faceid or faceuri
    string origin = 3;  // Origin of the route(i.e. who is announcing the route. The default is static route.)
    string cost = 4;    // cost of the route. The default is 0.
    string expires = 5; // Expiration time of the route in milliseconds.
}

// https://named-data.net/doc/NFD/current/manpages/nfdc-status.html
message NFDStatusReportReq{
    string format = 1; // text is default or xml
}
message NFDStatusReportRes{
    string report = 1;
    AckReply ack = 2;
}

// https://named-data.net/doc/NFD/current/manpages/nfdc-strategy.html
message NFDStrategyReq{
    string prefix = 1;
    string strategy = 2;    // strategy for a name prefix
}
message NFDStrategyListRes{
    repeated string strategies = 1;
    AckReply ack = 2;
}
message NFDStrategyShowRes{
    string strategy = 1;
    AckReply ack = 3;
}


message NLSRAdvertiseReq{
    string mode = 1;    	// advertise or withdraw
    string prefix = 2; 		// advertise or withdraw a name prefix
    string save = 3;    	// save or delete
}


message LSDB{
    string origin_router = 1;
    string prefix = 2;
}
message NLSRLsdbListRes{
    repeated LSDB lsdbs = 1; 		// nlsr lsdb list
    AckReply ack = 2;
}

// NFD and NLSR exported by the server.
service NFDRouterAgent {

    // A agent-to-external
    // Advertisement NFD Infomation
    rpc NFDHostNotify(NFDHost) returns (AckReply) {}

    // A external-to-agent
    // face command
    // rpc NFDFaceList(NFDFaceIDReq) returns (stream NFDFaceListRes) {}
    rpc NFDFaceList(NFDFaceIDReq) returns (NFDFaceListRes) {}
    rpc NFDFaceCreate(NFDFaceCreateReq) returns (AckReply) {}
    rpc NFDFaceDestroy(NFDFaceIDReq) returns (AckReply) {}
    rpc NFDFibList(NFDFaceIDReq) returns (NFDFibListRes) {}

    // route command
    rpc NFDRouteList(NFDRouteListReq) returns (NFDRouteListRes) {}
    rpc NFDRouteShow(NFDRouteShowReq) returns (NFDRouteShowRes) {}
    rpc NFDRouteAdd(NFDRouteReq) returns (AckReply) {}
    rpc NFDRouteRemove(NFDRouteReq) returns (AckReply) {}

    // status command
    rpc NFDStatusReport(NFDStatusReportReq) returns (NFDStatusReportRes) {}

    // strategy command
    rpc NFDStrategyList(google.protobuf.Empty) returns (NFDStrategyListRes) {}
    rpc NFDStrategyShow(NFDStrategyReq) returns (NFDStrategyShowRes) {}
    rpc NFDStrategySet(NFDStrategyReq) returns (AckReply) {}
    rpc NFDStrategyUnset(NFDStrategyReq) returns (AckReply) {}

    // nlsr advertise, withdraw
    rpc NLSRAdvertiseName(NLSRAdvertiseReq) returns (AckReply) {}
    rpc NLSRLsdbList(google.protobuf.Empty) returns (NLSRLsdbListRes) {}
}
